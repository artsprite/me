<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCampaignSubscriber9Service extends AppKernelProdContainer
{
    /*
     * Gets the public 'Mautic\LeadBundle\EventListener\CampaignSubscriber' shared autowired service.
     *
     * @return \Mautic\LeadBundle\EventListener\CampaignSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? self::getLeadModelService($container));

        if (isset($container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'])) {
            return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'];
        }
        $b = ($container->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? self::getFieldModel2Service($container));

        if (isset($container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'])) {
            return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'];
        }
        $c = ($container->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? self::getListModelService($container));

        if (isset($container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'])) {
            return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'];
        }
        $d = ($container->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? self::getCompanyModelService($container));

        if (isset($container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'])) {
            return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'];
        }
        $e = ($container->services['Mautic\\CampaignBundle\\Model\\CampaignModel'] ?? self::getCampaignModelService($container));

        if (isset($container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'])) {
            return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'];
        }
        $f = ($container->services['Mautic\\PointBundle\\Model\\PointGroupModel'] ?? $container->load('getPointGroupModelService'));

        if (isset($container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'])) {
            return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'];
        }
        $g = ($container->services['mautic.lead.provider.fillterOperator'] ?? self::getMautic_Lead_Provider_FillterOperatorService($container));

        if (isset($container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'])) {
            return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'];
        }

        return $container->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] = new \Mautic\LeadBundle\EventListener\CampaignSubscriber(($container->services['mautic.helper.ip_lookup'] ?? self::getMautic_Helper_IpLookupService($container)), $a, $b, $c, $d, $e, ($container->services['mautic.helper.core_parameters'] ??= new \Mautic\CoreBundle\Helper\CoreParametersHelper($container)), ($container->services['Mautic\\LeadBundle\\Model\\DoNotContact'] ?? self::getDoNotContactService($container)), $f, $g);
    }
}

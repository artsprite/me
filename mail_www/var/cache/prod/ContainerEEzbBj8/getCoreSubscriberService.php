<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCoreSubscriberService extends AppKernelProdContainer
{
    /*
     * Gets the public 'Mautic\CoreBundle\EventListener\CoreSubscriber' shared autowired service.
     *
     * @return \Mautic\CoreBundle\EventListener\CoreSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.helper.menu'] ?? $container->load('getMautic_Helper_MenuService'));

        if (isset($container->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'])) {
            return $container->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'];
        }
        $b = ($container->services['Mautic\\UserBundle\\Model\\UserModel'] ?? self::getUserModelService($container));

        if (isset($container->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'])) {
            return $container->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'])) {
            return $container->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'];
        }

        return $container->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'] = new \Mautic\CoreBundle\EventListener\CoreSubscriber(($container->services['mautic.helper.bundle'] ?? self::getMautic_Helper_BundleService($container)), $a, ($container->services['mautic.helper.user'] ?? self::getMautic_Helper_UserService($container)), ($container->services['mautic.helper.core_parameters'] ??= new \Mautic\CoreBundle\Helper\CoreParametersHelper($container)), ($container->services['jms_serializer.authorization_checker'] ?? self::getJmsSerializer_AuthorizationCheckerService($container)), $b, $c, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }
}

<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPointModelService extends AppKernelProdContainer
{
    /*
     * Gets the public 'Mautic\PointBundle\Model\PointModel' shared autowired service.
     *
     * @return \Mautic\PointBundle\Model\PointModel
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? self::getLeadModelService($container));

        if (isset($container->services['Mautic\\PointBundle\\Model\\PointModel'])) {
            return $container->services['Mautic\\PointBundle\\Model\\PointModel'];
        }
        $b = ($container->services['Mautic\\LeadBundle\\Tracker\\ContactTracker'] ?? self::getContactTrackerService($container));

        if (isset($container->services['Mautic\\PointBundle\\Model\\PointModel'])) {
            return $container->services['Mautic\\PointBundle\\Model\\PointModel'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Mautic\\PointBundle\\Model\\PointModel'])) {
            return $container->services['Mautic\\PointBundle\\Model\\PointModel'];
        }
        $d = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['Mautic\\PointBundle\\Model\\PointModel'])) {
            return $container->services['Mautic\\PointBundle\\Model\\PointModel'];
        }
        $e = ($container->services['Mautic\\PointBundle\\Model\\PointGroupModel'] ?? $container->load('getPointGroupModelService'));

        if (isset($container->services['Mautic\\PointBundle\\Model\\PointModel'])) {
            return $container->services['Mautic\\PointBundle\\Model\\PointModel'];
        }

        return $container->services['Mautic\\PointBundle\\Model\\PointModel'] = new \Mautic\PointBundle\Model\PointModel(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['mautic.helper.ip_lookup'] ?? self::getMautic_Helper_IpLookupService($container)), $a, $b, ($container->services['mautic.permission.manager'] ?? self::getMautic_Permission_ManagerService($container)), ($container->services['mautic.security'] ?? self::getMautic_SecurityService($container)), $c, $d, ($container->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? self::getTranslatorService($container)), ($container->services['mautic.helper.user'] ?? self::getMautic_Helper_UserService($container)), ($container->services['monolog.logger.mautic'] ?? self::getMonolog_Logger_MauticService($container)), ($container->services['mautic.helper.core_parameters'] ??= new \Mautic\CoreBundle\Helper\CoreParametersHelper($container)), $e);
    }
}

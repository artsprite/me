<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authentication_Provider_Mautic_SsoLoginService extends AppKernelProdContainer
{
    /*
     * Gets the public 'security.authentication.provider.mautic.sso_login' shared autowired service.
     *
     * @return \Mautic\UserBundle\Security\Authenticator\PluginAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['security.authentication.provider.mautic.sso_login'])) {
            return $container->services['security.authentication.provider.mautic.sso_login'];
        }
        $b = ($container->services['mautic.helper.integration'] ?? self::getMautic_Helper_IntegrationService($container));

        if (isset($container->services['security.authentication.provider.mautic.sso_login'])) {
            return $container->services['security.authentication.provider.mautic.sso_login'];
        }
        $c = ($container->services['mautic.user.provider'] ?? self::getMautic_User_ProviderService($container));

        if (isset($container->services['security.authentication.provider.mautic.sso_login'])) {
            return $container->services['security.authentication.provider.mautic.sso_login'];
        }
        $d = ($container->privates['fos_oauth_server.server'] ?? $container->load('getFosOauthServer_ServerService'));

        if (isset($container->services['security.authentication.provider.mautic.sso_login'])) {
            return $container->services['security.authentication.provider.mautic.sso_login'];
        }

        return $container->services['security.authentication.provider.mautic.sso_login'] = new \Mautic\UserBundle\Security\Authenticator\PluginAuthenticator(($container->services['Mautic\\UserBundle\\Security\\Authentication\\Token\\Permissions\\TokenPermissions'] ?? $container->load('getTokenPermissionsService')), $a, $b, $c, ($container->services['mautic.security.authentication_handler'] ?? $container->load('getMautic_Security_AuthenticationHandlerService')), $d, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), 'sso_login');
    }
}

<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getImportModelService extends AppKernelProdContainer
{
    /*
     * Gets the public 'Mautic\LeadBundle\Model\ImportModel' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Model\ImportModel
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? self::getLeadModelService($container));

        if (isset($container->services['Mautic\\LeadBundle\\Model\\ImportModel'])) {
            return $container->services['Mautic\\LeadBundle\\Model\\ImportModel'];
        }
        $b = ($container->services['Mautic\\CoreBundle\\Model\\NotificationModel'] ?? self::getNotificationModelService($container));

        if (isset($container->services['Mautic\\LeadBundle\\Model\\ImportModel'])) {
            return $container->services['Mautic\\LeadBundle\\Model\\ImportModel'];
        }
        $c = ($container->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? self::getCompanyModelService($container));

        if (isset($container->services['Mautic\\LeadBundle\\Model\\ImportModel'])) {
            return $container->services['Mautic\\LeadBundle\\Model\\ImportModel'];
        }
        $d = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['Mautic\\LeadBundle\\Model\\ImportModel'])) {
            return $container->services['Mautic\\LeadBundle\\Model\\ImportModel'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Mautic\\LeadBundle\\Model\\ImportModel'])) {
            return $container->services['Mautic\\LeadBundle\\Model\\ImportModel'];
        }
        $f = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['Mautic\\LeadBundle\\Model\\ImportModel'])) {
            return $container->services['Mautic\\LeadBundle\\Model\\ImportModel'];
        }

        return $container->services['Mautic\\LeadBundle\\Model\\ImportModel'] = new \Mautic\LeadBundle\Model\ImportModel(($container->services['mautic.helper.paths'] ?? self::getMautic_Helper_PathsService($container)), $a, $b, ($container->services['mautic.helper.core_parameters'] ??= new \Mautic\CoreBundle\Helper\CoreParametersHelper($container)), $c, $d, ($container->services['mautic.security'] ?? self::getMautic_SecurityService($container)), $e, $f, ($container->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? self::getTranslatorService($container)), ($container->services['mautic.helper.user'] ?? self::getMautic_Helper_UserService($container)), ($container->services['monolog.logger.mautic'] ?? self::getMonolog_Logger_MauticService($container)), ($container->services['Mautic\\CoreBundle\\ProcessSignal\\ProcessSignalService'] ??= new \Mautic\CoreBundle\ProcessSignal\ProcessSignalService()));
    }
}

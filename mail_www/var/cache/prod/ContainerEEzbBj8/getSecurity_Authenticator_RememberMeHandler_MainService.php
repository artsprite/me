<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_RememberMeHandler_MainService extends AppKernelProdContainer
{
    /*
     * Gets the private 'security.authenticator.remember_me_handler.main' shared service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\SignatureRememberMeHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.user.provider'] ?? self::getMautic_User_ProviderService($container));

        if (isset($container->privates['security.authenticator.remember_me_handler.main'])) {
            return $container->privates['security.authenticator.remember_me_handler.main'];
        }

        return $container->privates['security.authenticator.remember_me_handler.main'] = new \Symfony\Component\Security\Http\RememberMe\SignatureRememberMeHandler(new \Symfony\Component\Security\Core\Signature\SignatureHasher(($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), ['password'], $container->getEnv('nullable:resolve:MAUTIC_REMEMBERME_KEY'), NULL, NULL), $a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ['secret' => $container->getEnv('nullable:resolve:MAUTIC_REMEMBERME_KEY'), 'lifetime' => $container->getEnv('int:resolve:MAUTIC_REMEMBERME_LIFETIME'), 'path' => $container->getEnv('nullable:resolve:MAUTIC_REMEMBERME_PATH'), 'domain' => $container->getEnv('nullable:resolve:MAUTIC_REMEMBERME_DOMAIN'), 'samesite' => 'lax', 'user_providers' => [], 'catch_exceptions' => true, 'signature_properties' => ['password'], 'name' => 'REMEMBERME', 'secure' => true, 'httponly' => true, 'always_remember_me' => false, 'remember_me_parameter' => '_remember_me'], ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container)));
    }
}

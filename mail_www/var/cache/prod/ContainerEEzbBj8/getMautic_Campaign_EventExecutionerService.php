<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMautic_Campaign_EventExecutionerService extends AppKernelProdContainer
{
    /*
     * Gets the public 'mautic.campaign.event_executioner' shared service.
     *
     * @return \Mautic\CampaignBundle\Executioner\EventExecutioner
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.campaign.event_collector'] ?? self::getMautic_Campaign_EventCollectorService($container));

        if (isset($container->services['mautic.campaign.event_executioner'])) {
            return $container->services['mautic.campaign.event_executioner'];
        }
        $b = ($container->services['mautic.campaign.event_logger'] ?? $container->load('getMautic_Campaign_EventLoggerService'));

        if (isset($container->services['mautic.campaign.event_executioner'])) {
            return $container->services['mautic.campaign.event_executioner'];
        }
        $c = ($container->services['mautic.campaign.executioner.action'] ?? $container->load('getMautic_Campaign_Executioner_ActionService'));

        if (isset($container->services['mautic.campaign.event_executioner'])) {
            return $container->services['mautic.campaign.event_executioner'];
        }
        $d = ($container->services['mautic.campaign.executioner.condition'] ?? $container->load('getMautic_Campaign_Executioner_ConditionService'));

        if (isset($container->services['mautic.campaign.event_executioner'])) {
            return $container->services['mautic.campaign.event_executioner'];
        }
        $e = ($container->services['mautic.campaign.executioner.decision'] ?? $container->load('getMautic_Campaign_Executioner_DecisionService'));

        if (isset($container->services['mautic.campaign.event_executioner'])) {
            return $container->services['mautic.campaign.event_executioner'];
        }
        $f = ($container->services['mautic.campaign.scheduler'] ?? $container->load('getMautic_Campaign_SchedulerService'));

        if (isset($container->services['mautic.campaign.event_executioner'])) {
            return $container->services['mautic.campaign.event_executioner'];
        }

        return $container->services['mautic.campaign.event_executioner'] = new \Mautic\CampaignBundle\Executioner\EventExecutioner($a, $b, $c, $d, $e, ($container->services['monolog.logger.mautic'] ?? self::getMonolog_Logger_MauticService($container)), $f, ($container->services['mautic.campaign.helper.removed_contact_tracker'] ??= new \Mautic\CampaignBundle\Helper\RemovedContactTracker()));
    }
}

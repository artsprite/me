<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMautic_Plugin_Fullcontact_LookupHelperService extends AppKernelProdContainer
{
    /*
     * Gets the public 'mautic.plugin.fullcontact.lookup_helper' shared service.
     *
     * @return \MauticPlugin\MauticFullContactBundle\Helper\LookupHelper
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.helper.integration'] ?? self::getMautic_Helper_IntegrationService($container));

        if (isset($container->services['mautic.plugin.fullcontact.lookup_helper'])) {
            return $container->services['mautic.plugin.fullcontact.lookup_helper'];
        }
        $b = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['mautic.plugin.fullcontact.lookup_helper'])) {
            return $container->services['mautic.plugin.fullcontact.lookup_helper'];
        }
        $c = ($container->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? self::getLeadModelService($container));

        if (isset($container->services['mautic.plugin.fullcontact.lookup_helper'])) {
            return $container->services['mautic.plugin.fullcontact.lookup_helper'];
        }
        $d = ($container->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? self::getCompanyModelService($container));

        if (isset($container->services['mautic.plugin.fullcontact.lookup_helper'])) {
            return $container->services['mautic.plugin.fullcontact.lookup_helper'];
        }

        return $container->services['mautic.plugin.fullcontact.lookup_helper'] = new \MauticPlugin\MauticFullContactBundle\Helper\LookupHelper($a, ($container->services['mautic.helper.user'] ?? self::getMautic_Helper_UserService($container)), ($container->services['monolog.logger.mautic'] ?? self::getMonolog_Logger_MauticService($container)), $b, $c, $d);
    }
}

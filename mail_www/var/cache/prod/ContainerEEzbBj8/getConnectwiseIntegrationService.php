<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getConnectwiseIntegrationService extends AppKernelProdContainer
{
    /*
     * Gets the public 'MauticPlugin\MauticCrmBundle\Integration\ConnectwiseIntegration' shared autowired service.
     *
     * @return \MauticPlugin\MauticCrmBundle\Integration\ConnectwiseIntegration
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $b = ($container->services['mautic.helper.cache_storage'] ?? self::getMautic_Helper_CacheStorageService($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $c = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $d = ($container->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? self::getLeadModelService($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $e = ($container->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? self::getCompanyModelService($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $f = ($container->services['Mautic\\CoreBundle\\Model\\NotificationModel'] ?? self::getNotificationModelService($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $g = ($container->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? self::getFieldModel2Service($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $h = ($container->services['Mautic\\PluginBundle\\Model\\IntegrationEntityModel'] ?? $container->load('getIntegrationEntityModelService'));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }
        $i = ($container->services['Mautic\\LeadBundle\\Model\\DoNotContact'] ?? self::getDoNotContactService($container));

        if (isset($container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'])) {
            return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'];
        }

        return $container->services['MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration'] = new \MauticPlugin\MauticCrmBundle\Integration\ConnectwiseIntegration($a, $b, ($container->services['mautic.permission.manager'] ?? self::getMautic_Permission_ManagerService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $c, ($container->services['translator'] ?? self::getTranslator2Service($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->services['mautic.helper.encryption'] ?? self::getMautic_Helper_EncryptionService($container)), $d, $e, ($container->services['mautic.helper.paths'] ?? self::getMautic_Helper_PathsService($container)), $f, $g, $h, $i, ($container->services['mautic.lead.field.fields_with_unique_identifier'] ?? self::getMautic_Lead_Field_FieldsWithUniqueIdentifierService($container)));
    }
}

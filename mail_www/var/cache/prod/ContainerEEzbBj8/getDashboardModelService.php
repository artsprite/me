<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDashboardModelService extends AppKernelProdContainer
{
    /*
     * Gets the public 'Mautic\DashboardBundle\Model\DashboardModel' shared autowired service.
     *
     * @return \Mautic\DashboardBundle\Model\DashboardModel
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['Mautic\\DashboardBundle\\Model\\DashboardModel'])) {
            return $container->services['Mautic\\DashboardBundle\\Model\\DashboardModel'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Mautic\\DashboardBundle\\Model\\DashboardModel'])) {
            return $container->services['Mautic\\DashboardBundle\\Model\\DashboardModel'];
        }
        $c = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['Mautic\\DashboardBundle\\Model\\DashboardModel'])) {
            return $container->services['Mautic\\DashboardBundle\\Model\\DashboardModel'];
        }

        return $container->services['Mautic\\DashboardBundle\\Model\\DashboardModel'] = new \Mautic\DashboardBundle\Model\DashboardModel(($container->services['mautic.helper.core_parameters'] ??= new \Mautic\CoreBundle\Helper\CoreParametersHelper($container)), ($container->services['mautic.helper.paths'] ?? self::getMautic_Helper_PathsService($container)), ($container->services['Mautic\\DashboardBundle\\Factory\\WidgetDetailEventFactory'] ?? $container->load('getWidgetDetailEventFactoryService')), ($container->services['mautic.filesystem'] ??= new \Mautic\CoreBundle\Helper\Filesystem()), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a, ($container->services['mautic.security'] ?? self::getMautic_SecurityService($container)), $b, $c, ($container->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? self::getTranslatorService($container)), ($container->services['mautic.helper.user'] ?? self::getMautic_Helper_UserService($container)), ($container->services['monolog.logger.mautic'] ?? self::getMonolog_Logger_MauticService($container)), ($container->services['mautic.cache.provider'] ?? self::getMautic_Cache_ProviderService($container)));
    }
}

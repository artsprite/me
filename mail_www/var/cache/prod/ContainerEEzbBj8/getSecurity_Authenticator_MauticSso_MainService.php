<?php

namespace ContainerEEzbBj8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_MauticSso_MainService extends AppKernelProdContainer
{
    /*
     * Gets the public 'security.authenticator.mautic_sso.main' shared autowired service.
     *
     * @return \Mautic\UserBundle\Security\Authenticator\SsoAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.user.provider'] ?? self::getMautic_User_ProviderService($container));

        if (isset($container->services['security.authenticator.mautic_sso.main'])) {
            return $container->services['security.authenticator.mautic_sso.main'];
        }
        $b = ($container->privates['security.authentication.success_handler.main.form_login'] ?? $container->load('getSecurity_Authentication_SuccessHandler_Main_FormLoginService'));

        if (isset($container->services['security.authenticator.mautic_sso.main'])) {
            return $container->services['security.authenticator.mautic_sso.main'];
        }
        $c = ($container->privates['security.authentication.failure_handler.main.form_login'] ?? $container->load('getSecurity_Authentication_FailureHandler_Main_FormLoginService'));

        if (isset($container->services['security.authenticator.mautic_sso.main'])) {
            return $container->services['security.authenticator.mautic_sso.main'];
        }
        $d = ($container->services['mautic.helper.integration'] ?? self::getMautic_Helper_IntegrationService($container));

        if (isset($container->services['security.authenticator.mautic_sso.main'])) {
            return $container->services['security.authenticator.mautic_sso.main'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['security.authenticator.mautic_sso.main'])) {
            return $container->services['security.authenticator.mautic_sso.main'];
        }

        return $container->services['security.authenticator.mautic_sso.main'] = new \Mautic\UserBundle\Security\Authenticator\SsoAuthenticator(['enable_csrf' => true, 'login_path' => '/s/login', 'check_path' => '/s/login_check', 'use_forward' => false, 'require_previous_session' => false, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'authenticate', 'post_only' => true, 'form_only' => false], ($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService')), $a, $b, $c, $d, $e);
    }
}
